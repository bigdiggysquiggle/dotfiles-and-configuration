#!/bin/bash

# a bash script for downloading, building, and installing
# the Glorious Eggroll fork of steam's proton compatibility
# tool.
#TODO: figure out what a failed patch outputs as an error 

# If we don't even have a compat folder we're gonna have
# to make it. And the follow if statement will take care
# of cloning for us
if ! [ -d $HOME/.steam/compat ]; then
	mkdir $HOME/.steam/compat
fi
cd $HOME/.steam/compat/

# If GE isn't even cloned, clone it
if ! [ -d "proton-ge-custom" ]; then
	git clone --recurse-submodules http://github.com/gloriouseggroll/proton-ge-custom
	STATUS="DO"
fi

# Check if we need to run an update
cd $HOME/.steam/compat/proton-ge-custom
STATUS=${STATUS:-"$(git pull --recurse-submodules)"}
echo "stat check"
echo $STATUS
if [[ "$STATUS" == *"Already up to date."* ]]; then
	echo "Everything is up to date"
	exit
fi

# Apply any patches and log the results for error checks
./patches/protonprep-valve-staging.sh &> patchlog.txt
if [ -n "$(grep -i -w fail patchlog.txt)" ] || [ -n "$(grep -i -w error patchlog.txt)" ]; then
	echo "Errors occured: see patchlog.txt"
	echo "Note: it's extremely likely errors didn't occur and grep just has brain damage"
else
	echo "Patches applied successfully!"
fi

# Remove any old build files
if [ -d "build" ]; then
	rm -rf build
fi

# Create and move to our build directory, then build
mkdir build && cd build
../configure.sh --enable-ccache --build-name=GE-Proton --container-engine=docker
make redist &> log

# Copy the completed build to the proper location,
# removing the old build if it exists
DEST="$HOME/.steam/root/compatibilitytools.d"
if [ -d $DEST/GE-Proton ]; then
	rm -rf
fi
cp -r GE-Proton $DEST/GE-Proton
