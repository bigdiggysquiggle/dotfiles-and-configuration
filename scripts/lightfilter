#!/bin/bash

#set the DISPLAY variable so xrandr can work when this is launched by a cron job
export DISPLAY=:0
MONITORS="$(xrandr | grep -w "connected" | cut -d ' ' -f 1)"
SETTING=""
R=0.9
G=0.7
B=0.3

#get the latitude and longitude from our config file if it exists.
#receive user input to create the config file if it doesn't
CONF="$HOME/.config/lightfilter.conf"
if [ -f "$HOME/.config/lightfilter.conf" ]; then
	LAT="$(grep latitude $CONF | sed 's/^.*=//')"
	LNG="$(grep longitude $CONF | sed 's/^.*=//')"
fi
if [ -z "$LAT" ] || [ -z "$LNG" ]; then
	echo "Enter latitude:"
	read LAT
	echo "Enter longitude:"
	read LNG
fi
echo "latitude=$LAT" > "$CONF"
echo "longitude=$LNG" >> "$CONF"

function on()	{
	#set our start and end points for our stepwise hue shifting later as well as the kind of math to perform
	SETTING="0.9:0.7:0.3"
	START_R=1
	START_G=1
	START_B=1

	RED=$R
	GREEN=$G
	BLUE=$B

	OP=-
}

function off()	{
	#set our start and end points for our stepwise hue shifting later as well as the kind of math to perform
	SETTING="1"
	START_R=$R
	START_G=$G
	START_B=$B

	RED=1
	GREEN=1
	BLUE=1

	OP=+
}

function toggle()	{
	CURR="$(xrandr --verbose | grep -i "gamma" | tr -s ' ' '	' | cut -d '	' -f 3 | head -n 1)"
	[ "$CURR" = "1.0:1.0:1.0" ] && on || off
}

function setup()	{
	echo $URL
	RESPONSE="$(curl "https://api.sunrise-sunset.org/json?lat=${LAT}i"'&'"lng=${LNG}" |
		sed -e 's/[{}]/''/g' |
		awk -v k="text" '{n=split($0,a,","); for (i=1; i<=n; i++) print a[i]}')"
	echo $RESPONSE
	OFFH="$(grep "sunrise" <<< "$RESPONSE" | cut -d: -f3)"
	OFFH="${OFFH:1}"
	OFFM="$(grep "sunrise" <<< "$RESPONSE" | cut -d: -f4)"
	ONH="$(grep "sunset" <<< "$RESPONSE" | cut -d: -f2)"
	ONH=${ONH:1}
	ONH=$((ONH + 12))
	ONM="$(grep "sunset" <<< "$RESPONSE" | cut -d: -f3)"
	#right now this assumes that the crontab entries for this script are going to be the first two entries
	#TODO: filter crontab entries to remove duplicate entries for this script instead of ensuring absolute
	#      position in the crontab
	crontab<<EOF
$ONM $ONH * * * $HOME/scripts/lightfilter on
$OFFM $OFFH * * * $HOME/scripts/lightfilter off
$(crontab -l | tail -n +3)
EOF
	TIME=$(date +%k%M)
	if [ $TIME -gt ${ONH}${ONM} -o $TIME -lt ${OFFH}${OFFM} ]; then
		on
	else
		off
	fi
}

case "$1" in
	on|off|toggle)
		$1
		;;
	*)
		setup
		;;
esac

#set variables that will be reused in the stepwise hue shift
#separated into a block of variables so they can be treated as settings
PRECISION=6
STEPS_PER_SEC=30
SLEEPTIME="$(dc -e "$PRECISION k 1 $STEPS_PER_SEC /p")"
DURATION=1
STEPS="$(dc -e "$DURATION $STEPS_PER_SEC *p")"
R=$START_R
G=$START_G
B=$START_B
DELTA_R=$(dc -e "$PRECISION k $R $RED - $STEPS /p")
DELTA_G=$(dc -e "$PRECISION k $G $GREEN - $STEPS /p")
DELTA_B=$(dc -e "$PRECISION k $B $BLUE - $STEPS /p")

i=0
while [ $i -le $STEPS ]; do
	R=$(dc -e "$PRECISION k $R $DELTA_R ${OP}p" 2>/dev/null)
	G=$(dc -e "$PRECISION k $G $DELTA_G ${OP}p" 2>/dev/null)
	B=$(dc -e "$PRECISION k $B $DELTA_B ${OP}p" 2>/dev/null)
	STEP="$R:$G:$B"
	for MONITOR in $MONITORS; do
		xrandr --output "$MONITOR" --gamma "$STEP"
	done
	i=$(($i+1))
done
#apply our final desired setting to account for precision differences
#and to allow the toggle function to correctly detect which state it's in
for MONITOR in $MONITORS; do
	xrandr --output "$MONITOR" --gamma "$SETTING"
done
